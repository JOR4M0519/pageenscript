package pageenscript2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Accordion;
  private ConceptPresentation props_AccordionItems;
  private ConceptPresentation props_Alert;
  private ConceptPresentation props_AlertList;
  private ConceptPresentation props_Alerts;
  private ConceptPresentation props_Button;
  private ConceptPresentation props_Card;
  private ConceptPresentation props_CardDeck;
  private ConceptPresentation props_Cards;
  private ConceptPresentation props_Carousel;
  private ConceptPresentation props_CarouselItems;
  private ConceptPresentation props_Hero;
  private ConceptPresentation props_Item;
  private ConceptPresentation props_ItemList;
  private ConceptPresentation props_ListGroup;
  private ConceptPresentation props_ListItems;
  private ConceptPresentation props_Modal;
  private ConceptPresentation props_NavBar;
  private ConceptPresentation props_Page;
  private ConceptPresentation props_Program;
  private ConceptPresentation props_Seccion;
  private ConceptPresentation props_SeccionType;
  private ConceptPresentation props_Seccions;
  private ConceptPresentation props_StyleList;
  private ConceptPresentation props_Toast;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Accordion:
        if (props_Accordion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Accordion");
          props_Accordion = cpb.create();
        }
        return props_Accordion;
      case LanguageConceptSwitch.AccordionItems:
        if (props_AccordionItems == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AccordionItems");
          props_AccordionItems = cpb.create();
        }
        return props_AccordionItems;
      case LanguageConceptSwitch.Alert:
        if (props_Alert == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Alert");
          props_Alert = cpb.create();
        }
        return props_Alert;
      case LanguageConceptSwitch.AlertList:
        if (props_AlertList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AlertList");
          props_AlertList = cpb.create();
        }
        return props_AlertList;
      case LanguageConceptSwitch.Alerts:
        if (props_Alerts == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Alerts");
          props_Alerts = cpb.create();
        }
        return props_Alerts;
      case LanguageConceptSwitch.Button:
        if (props_Button == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Button");
          props_Button = cpb.create();
        }
        return props_Button;
      case LanguageConceptSwitch.Card:
        if (props_Card == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Card");
          props_Card = cpb.create();
        }
        return props_Card;
      case LanguageConceptSwitch.CardDeck:
        if (props_CardDeck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CardDeck");
          props_CardDeck = cpb.create();
        }
        return props_CardDeck;
      case LanguageConceptSwitch.Cards:
        if (props_Cards == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Cards");
          props_Cards = cpb.create();
        }
        return props_Cards;
      case LanguageConceptSwitch.Carousel:
        if (props_Carousel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Carousel");
          props_Carousel = cpb.create();
        }
        return props_Carousel;
      case LanguageConceptSwitch.CarouselItems:
        if (props_CarouselItems == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CarouselItems");
          props_CarouselItems = cpb.create();
        }
        return props_CarouselItems;
      case LanguageConceptSwitch.Hero:
        if (props_Hero == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Hero");
          props_Hero = cpb.create();
        }
        return props_Hero;
      case LanguageConceptSwitch.Item:
        if (props_Item == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Item");
          props_Item = cpb.create();
        }
        return props_Item;
      case LanguageConceptSwitch.ItemList:
        if (props_ItemList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ItemList");
          props_ItemList = cpb.create();
        }
        return props_ItemList;
      case LanguageConceptSwitch.ListGroup:
        if (props_ListGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ListGroup");
          props_ListGroup = cpb.create();
        }
        return props_ListGroup;
      case LanguageConceptSwitch.ListItems:
        if (props_ListItems == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ListItems");
          props_ListItems = cpb.create();
        }
        return props_ListItems;
      case LanguageConceptSwitch.Modal:
        if (props_Modal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Modal");
          props_Modal = cpb.create();
        }
        return props_Modal;
      case LanguageConceptSwitch.NavBar:
        if (props_NavBar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NavBar");
          props_NavBar = cpb.create();
        }
        return props_NavBar;
      case LanguageConceptSwitch.Page:
        if (props_Page == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Page");
          props_Page = cpb.create();
        }
        return props_Page;
      case LanguageConceptSwitch.Program:
        if (props_Program == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Program");
          props_Program = cpb.create();
        }
        return props_Program;
      case LanguageConceptSwitch.Seccion:
        if (props_Seccion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Seccion");
          props_Seccion = cpb.create();
        }
        return props_Seccion;
      case LanguageConceptSwitch.SeccionType:
        if (props_SeccionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SeccionType");
          props_SeccionType = cpb.create();
        }
        return props_SeccionType;
      case LanguageConceptSwitch.Seccions:
        if (props_Seccions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Seccions");
          props_Seccions = cpb.create();
        }
        return props_Seccions;
      case LanguageConceptSwitch.StyleList:
        if (props_StyleList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StyleList");
          props_StyleList = cpb.create();
        }
        return props_StyleList;
      case LanguageConceptSwitch.Toast:
        if (props_Toast == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Toast");
          props_Toast = cpb.create();
        }
        return props_Toast;
    }
    return null;
  }
}
